<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../docbook-xml-4.5/docbookx.dtd"
[<!ENTITY % manualvariables SYSTEM "manualvariables.mod"> %manualvariables;]>

<section id="app.regex">
  <title id="app.regex.title">Regular expressions</title>

  <para>This appendix is intended for users interested in exploring a
  powerful way to boost their productivity. Although seen as daunting and
  complex, even the simplest regular expressions (often abbreviated
  <emphasis>regex</emphasis> or <emphasis>regexp</emphasis>) are extremely
  useful, not only in OmegaT, but in many other applications you might use
  on a day-to-day basis.</para>

  <note>
    <para>Regular expressions actually come in different “flavors” or
    “dialects”, and may differ slightly in other applications.</para>
    <para>The descriptions here apply to the implementation of regular
    expressions in Java.</para>
  </note>

  <para>Only the fundamentals most useful to translators are covered. The
  <link linkend="app.regex.tools" endterm="app.regex.tools.title"/>
  section at the end of this appendix provides a few starting points to
  explore advanced or complex uses beyond the scope of this manual. If you need help for a specific case, you can also ask questions in the various support channels.</para>
  
  <para>Regular expressions generally use a combination of letters,
  digits, and symbols (collectively known as <emphasis>characters</emphasis>)
  to define an <emphasis>expression</emphasis> that represents a specific text
  pattern.</para>

  <para>Here are a few examples.
  <variablelist>
    <varlistentry>
      <term>[0-9]</term>
      <listitem><para>Any single digit from 0 to 9.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>\w+</term>
      <listitem><para>Represents one or more “word characters”, namely
      the letters of the alphabet, digits, and
      underscore symbols.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>\h?</term>
      <listitem><para>Represents zero or one horizontal whitespace
      character (this includes regular and non-breaking spaces as well as
      tabs, but not line break characters, which belong to the “vertical
      whitespace” category (\v).)</para>
      </listitem>
    </varlistentry>
  </variablelist>    
  </para>
  
  <para>Many OmegaT functions rely on regular expressions or make them
  available as an option:

  <variablelist>
    <varlistentry>
      <term>Searches</term>
      <listitem>
        <para>OmegaT searches include a <link
        linkend="windows.text.search.methods.regex"
        endterm="windows.text.search.methods.regex.title"/> option that
        allows you to make extremely powerful searches across your
        files.</para>
        <para>The same option in the <link linkend="windows.text.replace"
        endterm="windows.text.replace.title"/> dialog allows you to apply
        regular expressions to both the search and replaced text.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Custom tags</term>
      <listitem>
        <para>Custom tags are tags defined with regular expressions that 
        are handled exactly like native OmegaT tags. See <link
        linkend="dialogs.preferences.tag.processing.regular.expressions.for.custom.tags"
        endterm="dialogs.preferences.tag.processing.regular.expressions.for.custom.tags.title"/> 
        for details.</para>
        <para>Use the <code>|</code> (OR) character to separate individual
        tag definitions.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Flagged fragments</term>
      <listitem>
        <para><link
        linkend="dialogs.preferences.tag.processing.regular.expressions.for.fragments.that.should.be.removed.from.translation"
        endterm="dialogs.preferences.tag.processing.regular.expressions.for.fragments.that.should.be.removed.from.translation.title"/>
        allow you to define strings that OmegaT will mark in red by
        default, and treat as extraneous tags for validation
        purposes.</para>
        <para>Use the <code>|</code> (OR) character to separate individual
        fragment definitions.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Segmentation</term>
      <listitem>
        <para>Segmentation rules and language patterns are defined with
        regular expressions. You can modify them freely to improve the
        segmentation of a document or add additional general rules. See
        <link linkend="dialogs.preferences.segmentation.setup"
			  endterm="dialogs.preferences.segmentation.setup.title"/> for
        details.</para>
        <para>Segmentation or exception rules define the position in a
        segment where a split will, or will not, be made. Two regular
        expressions are required to define that position: a “before”
        expression to define the text pattern ahead of where the rule
        should apply, and an “after” expression to define the text 
        pattern following that position.</para>
        <para>A language pattern that matches the source language of the project will apply to that project.</para></listitem>
    </varlistentry>
  </variablelist>
  </para>

  <section id="app.regex.four.rules">
    <title id="app.regex.four.rules.title">The 4 rules</title>

    <para>Regular expressions are used to find text (including
    characters that are not visible on the screen or when printed out, such as
    spaces, tabs, or line breaks. Any given expression either
    <emphasis>matches</emphasis>, or <emphasis>does
    <emphasis role="bold">not</emphasis> match</emphasis> a word,
    phrase, or other sequence of text.</para>
    
    <para>Each and every character in the expression is relevant when
    determining a match.</para>
    <para>A number of characters or combinations of characters have a
    special meaning in a regular expression.</para>
    
    <warning>
      <para>Regular expressions only match text. They cannot match decorations
      such as <emphasis>bold</emphasis>, <emphasis>italics</emphasis>, or other
      <emphasis>stylistic effects</emphasis>.</para>
    </warning>

    <para>There are four rules to keep in mind.</para>

    <variablelist>
      <varlistentry>
        <term>Most characters simply match themselves</term>
        <listitem>
          <para>The majority of characters in a regular expression simply
          <emphasis>look for themselves</emphasis> in the text
          sequence.</para>
          <para>For example, the seven letters spelling out the word
          “<emphasis>example</emphasis>” simply tell the search function
          to match exactly those letters, in that order. Simply put, the
          search just looks for the word
          “<emphasis>example</emphasis>”.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Letters of the alphabet preceded by a blackslash
        (<literal>\</literal>) take on a special meaning</term>
        <listitem>
          <para>Unlike a letter on its own, which simply represents itself
          as noted above, a letter preceded by a <literal>\</literal> has a
          special function in a regular expression.</para>
          <para>For example, <emphasis>r</emphasis> is just a normal
          character but preceding it with <literal>\</literal> to make it
          <literal>\r</literal> turns it into a special combination that
          matches a <emphasis>carriage return character</emphasis>.
          Similarly, <literal>\R</literal> matches <emphasis>any line
          break character</emphasis>).</para>
          <note>
            <para>Only the letters <emphasis>i j l m o</emphasis>, and
            <emphasis>y</emphasis>, in both lower- and uppercase, have no
            special meaning when preceded by a backslash. This manual
            only describes a small subset of letters that take on a special
            meaning.</para>
            <para>Consult the sites in the <link
            linkend="app.regex.tools" endterm="app.regex.tools.title"/>
            section below for information on combinations not covered
            here.</para>
          </note>
        </listitem>
      </varlistentry>
        
      <varlistentry>
      <term>Twelve characters have a special meaning by default</term>
        <listitem>
          <para>That special meaning has to be cancelled by another
          character to match the character itself.</para>
          <para>The full list characters is presented <link
          linkend="app.regex.twelve.characters">below</link>. One
          example is <literal>.</literal>: on its own, it has the
          special meaning of matching <emphasis>any single
          character</emphasis>.</para>
          <para>To find a normal period, that meaning has to be cancelled
          using the <literal>\</literal>, to make the expression
          <literal>\.</literal>, which just matches a period.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The <literal>\</literal> character is a very special
        character</term>
        <listitem>
          <para>As stated above, the <literal>\</literal> character has
          the default special meaning of either cancelling or activating
          the special meaning of other characters. It has no effect if
          placed before a character with no special meaning (either by
          default or by addition).</para>
          <para>The <literal>\</literal> can cancel its own special
          meaning by doubling up to form <literal>\\</literal>, which
          simply matches the <emphasis>backslash</emphasis> character
          itself.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="app.regex.twelve.characters">
	  <title id="app.regex.twelve.characters.title">The 12 characters</title>
	
    <para>The twelve special characters are the
    <emphasis>backslash</emphasis> <literal>\</literal>, the
    <emphasis>caret</emphasis> <literal>^</literal>, the
    <emphasis>dollar sign</emphasis> <literal>$</literal>, the
    <emphasis>period</emphasis> (or <emphasis>dot</emphasis>)
    <literal>.</literal>, the
    <emphasis>vertical bar</emphasis> (or
    <emphasis>pipe symbol</emphasis>) <literal>|</literal>, the
    <emphasis>question mark</emphasis> <literal>?</literal>, the
    <emphasis>asterisk</emphasis> (or <emphasis>star</emphasis>)
    <literal>*</literal>, the <emphasis>plus sign</emphasis>
    <literal>+</literal>, the opening <emphasis>parenthesis</emphasis>
    <literal>(</literal>, the closing <emphasis>parenthesis</emphasis>,
    <literal>)</literal>, the opening square bracket
    <literal>[</literal>, and the opening
    <emphasis>curly brace</emphasis> <literal>{</literal>.</para>

    <para>Each character is briefly described below, and the
    descriptions are followed by a table presenting examples for
    each character.
    
	<variablelist>
      <varlistentry>
        <term>The BACKSLASH: <literal>\</literal></term>
        <listitem>
          <para>This character either cancels or activates the special meaning of the following character.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The CARET: <literal>^</literal></term>
        <listitem>
          <para>When it is the first character in the expression, the
          <emphasis>caret</emphasis> character matches the beginning of
          a line.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The DOLLAR sign: <literal>$</literal></term>
        <listitem>
          <para>When it As the last character in an expression, the <emphasis>dollar</emphasis> sign matches the end of a line.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The PERIOD: <literal>.</literal></term>
        <listitem>
          <para>Matches any single character.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The VERTICAL BAR: <literal>|</literal></term>
        <listitem>
          <para>This character functions as an “OR” and matches either
          of the expressions that precede or follow it.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The QUESTION MARK: <literal>?</literal></term>
        <listitem>
          <para>This character specifies that either zero or one
          instance of the preceding character or expression should be
          matched.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The ASTERISK: <literal>*</literal></term>
        <listitem>
          <para>This character specifies that zero or more instances of
          the preceding character or expression should be matched.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The PLUS sign: <literal>+</literal></term>
        <listitem>
          <para>This character specifies that one or more instances of
          the preceding character or expression should be matched.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The OPENING PARENTHESIS: <literal>(</literal></term>

        <listitem>
          <para>Enclosing a set of characters in PARENTHESES
          identifies it as a <emphasis>group</emphasis>. The contents
          of the group are stored in memory and can be reused later.
          Parentheses are always used in opening and closing pairs.
          Trying to use only the opening or closing parenthesis on its
          own will cause an error.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The CLOSING PARENTHESIS: <literal>)</literal></term>

        <listitem>
          <para>This character closes a group and is special because
          it can never be used on its own. It must be preceded by the
          <literal>\</literal> if you need to match the closing
          parenthesis character itself.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The OPENING SQUARE BRACKETS <literal>[</literal></term>

        <listitem>
          <para>This character must be paired with the closing square bracket to
          enclose a set of individual characters that each represent a
          valid potential match.</para>

          <para>Only the opening bracket is special and needs to be
          preceded by a backslash to search for the bracket character
          itself. If you only want to match the closing bracket as
          itself, you do not need to precede it with a backslash. (You
          can still add it, but it will have no effect on the
          expression or the result.)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The OPENING CURLY BRACE: <literal>{</literal></term>

        <listitem>
          <para>This character must be paired with the closing curly
          brace to encloses an <emphasis>exact number</emphasis>,
          <emphasis>minimum</emphasis>, <emphasis>maximum</emphasis>,
          or <emphasis>range</emphasis> specifying how many instances of
          the preceding character or group should be matched.</para>

          <para>Only the opening brace is special and needs to be
          preceded by a backslash to search for the brace character
          itself. If you only want to match the closing brace as
          itself, you do not need to precede it with a backslash. (You
          can still add it, but it will have no effect on the
          expression or the result.)</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </para>

  <table>
    <title>Examples for the twelve special characters</title>

    <tgroup cols="3">
      <colspec colwidth="170*"/>
      <colspec colwidth="200*"/>
      <colspec colwidth="600*"/>

      <thead>
        <row>
          <entry>Character</entry>
          <entry>Expression</entry>
          <entry>Examples</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>
            <emphasis>Backslash:</emphasis>
            <literal>\</literal>
          </entry>

          <entry>
            <literal>0\.\d</literal>
          </entry>

          <entry>
            <para>
              <informaltable>
                <tgroup cols="2">
                  <colspec colwidth="250*"/>
                  <colspec colwidth="750*"/>

                  <tbody>
                    <row>
                      <entry>Matches</entry>

                      <entry>
                        <para>A number between <emphasis>0.0</emphasis>
                        and <emphasis/>0.9, or just the final
                        <emphasis>1.5</emphasis> in numbers such as
                        11.5 or 561.5.</para>

                        <para>The <literal>\.</literal> cancels the “any
                        character” meaning of the period to match the
                        decimal point, while the <literal>\d</literal>
                        turns the ordinarily lowercase “d” into an
                        expression that matches any digit between 0 and 9.</para>
                      </entry>
                    </row>

                    <row>
                      <entry>Does not match</entry>

                      <entry>Sequences such as 0,1 or 0-3, in which a
                      period not preceded by a backslash would match any
                      character between two digits.</entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </para>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>Caret:</emphasis>
            <literal>^</literal>
          </entry>

          <entry>
            <orderedlist>
              <listitem>
                <para>
                  <literal>^A</literal>
                </para>
              </listitem>

              <listitem>
                <para>[^abc]</para>
              </listitem>
            </orderedlist>
          </entry>

          <entry>
            <para>
              <informaltable>
                <tgroup cols="2">
                  <colspec colwidth="250*"/>
                  <colspec colwidth="750*"/>

                  <tbody>
                    <row>
                      <entry>Matches</entry>

                      <entry>
                        <orderedlist>
                          <listitem>
                            <para>The uppercase “A” in the following
                            sentence: “A long, but exciting journey was
                            about to begin”.</para>
                          </listitem>

                          <listitem>
                            <para>The “k” in the word “back”.</para>
                          </listitem>
                        </orderedlist>
                      </entry>
                    </row>

                    <row>
                      <entry>Does not match</entry>

                      <entry>
                        <orderedlist>
                          <listitem>
                            <para>The uppercase “A” in the following
                            sentence: “My friend is writing a book
                            called <emphasis>A Long Journey</emphasis>”.</para>
                          </listitem>

                          <listitem>
                            <para>The lowercase “a”, “b”, or “c” in the
                            word “back”.</para>
                          </listitem>
                        </orderedlist>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </para>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>Dollar sign:</emphasis>
            <literal>$</literal>
          </entry>

          <entry>
            <literal>^\w+:$</literal>
          </entry>

          <entry>
            <para>
              <informaltable>
                <tgroup cols="2">
                  <colspec colwidth="250*"/>
                  <colspec colwidth="750*"/>

                  <tbody>
                    <row>
                      <entry>Matches</entry>

                      <entry>
                        <para>A line that consists of a single word and
                        ends with a colon.</para>
                        <para>
                          <emphasis>Example:</emphasis>
                        </para>
                      </entry>
                    </row>

                    <row>
                      <entry>Does not match</entry>

                      <entry>
                        <para>A line that consists of a single word, 
                        but does not end in a colon.</para>
                        <para>
                          <emphasis>Examples.</emphasis>
                        </para>
                      </entry>                            
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </para>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>Period (dot):</emphasis>
            <literal>.</literal>
          </entry>

          <entry>
            <literal>c.t</literal>
          </entry>

          <entry>
            <para>
              <informaltable>
                <tgroup cols="2">
                  <colspec colwidth="250*"/>
                  <colspec colwidth="750*"/>

                  <tbody>
                    <row>
                      <entry>Matches</entry>

                      <entry>
                        <para>Any combinations of three letters
                        starting with “c” and ending with “t”:
                        “<emphasis>cat</emphasis>”,
                        “<emphasis>cut</emphasis>”,
                        “<emphasis>cot</emphasis>”, or even nonsensical
                        combinations such as “<emphasis>czt</emphasis>”
                        or “<emphasis>cqt</emphasis>”.
                       </para>
                      </entry>
                    </row>

                    <row>
                      <entry>Does not match</entry>

                      <entry>
                        <para>
                          <literallayout>
                            <literal>c.</literal>
                            <literal>t</literal>
                          </literallayout>
                        </para>
                        
                        <para>Combinations of three letters starting
                        with “c” and ending with “t” in:</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </para>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>Vertical bar (pipe):</emphasis>
            <literal>|</literal>
          </entry>

          <entry>
            <literal>^An|^The</literal>
          </entry>

          <entry>
            <para>
              <informaltable>
                <tgroup cols="2">
                  <colspec colwidth="250*"/>
                  <colspec colwidth="750*"/>

                  <tbody>
                    <row>
                      <entry>Matches</entry>

                      <entry>
                        <para>The initial “An” or “The” in phrases such
                        as:</para>
                        <para>“An apple a day…”</para>
                        <para>“The apple of my eye…”</para>
                      </entry>
                    </row>

                    <row>
                      <entry>Does not match</entry>

                      <entry>
                        <para>The initial “An” or “The” in phrases such as:</para>
                        <para>“A story called <emphasis>An Unsung
                        Hero</emphasis>.”</para>
                        <para>“They work for <emphasis>The Daily
                          Post</emphasis>.”</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </para>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>Question mark:</emphasis>
            <literal>?</literal>
          </entry>

          <entry><literal>an?␣</literal> (where “␣” represents a
          single space).</entry>

          <entry>
            <para>
              <informaltable>
                <tgroup cols="2">
                  <colspec colwidth="250*"/>
                  <colspec colwidth="750*"/>

                  <tbody>
                    <row>
                      <entry>Matches</entry>

                      <entry>
                        <para>Either the “a ” or the “an ” in:</para>
                        <para>“I have a question.”</para>
                        <para>“I have an idea!”</para>

                        <para>It will also find the final “an ” of
                        “Can ” in a sentence such as “Can I help you?”,
                        or the final “a ” of “pasta” in “We had pasta
                        for lunch.”</para>
                      </entry>
                    </row>

                    <row>
                      <entry>Does not match</entry>

                      <entry>
                        <para>Neither the “a” or the “an” in:</para>
                        <para>The indefinite article: “a” (or
                        “an”).</para>
                        <para>Neither is followed by a space.</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </para>                    
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>Asterisk (star):</emphasis>
            <literal>*</literal>
          </entry>

          <entry>
            <literal>run\w*</literal>
          </entry>

          <entry>
            <para>
              <informaltable>
                <tgroup cols="2">
                  <colspec colwidth="250*"/>
                  <colspec colwidth="750*"/>

                  <tbody>
                    <row>
                      <entry>Matches</entry>

                      <entry>
                        <para>The word “run”, as well as “runs”,
                        “runner”, “runway”, “runt” in “grunt” or
                        “brunt”, and any other word or sequence of
                        characters containing “run” followed by
                        zero or more “<emphasis>word
                        characters</emphasis>” (which include digits
                        and the underscore, so the part before the
                        “@” in an email address such as
                        run_123@example.email.org is also a
                        match).</para>
                      </entry>
                    </row>

                    <row>
                      <entry>Does not match</entry>

                      <entry>
                        <para>The complete phrase in “run-on” or
                        “run'n'gun”, because the hyphen and apostrophe
                        are not included in <literal>\w</literal>. Only
                        the initial “run” in those phrases is
                        matched.</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </para>                    
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>Plus sign:</emphasis>
            <literal>+</literal>
          </entry>

          <entry>
            <literal>\d+.d</literal>
          </entry>

          <entry>
            <para>
              <informaltable>
                <tgroup cols="2">
                  <colspec colwidth="250*"/>
                  <colspec colwidth="750*"/>

                  <tbody>
                    <row>
                      <entry>Matches</entry>

                      <entry>
                        <para>Numbers such as “1.5”, “23.2” or “5235.8”
                        with a single decimal place and any number of
                        digits before the decimal point.</para>
                      </entry>
                    </row>

                    <row>
                      <entry>Does not match</entry>

                      <entry>
                        <para>The entire value of numbers such as
                        “5,235.8” or “21,571.9”. Only the portion of
                        the after the thousands separator will be
                        matched.</para></entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </para>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>Opening parenthesis:</emphasis>
            <literal>(</literal>
          </entry>

          <entry>
            <literal>(\b\w+\b)\h\1\b</literal>
          </entry>

          <entry>
            <para>
              <informaltable>
                <tgroup cols="2">
                  <colspec colwidth="250*"/>
                  <colspec colwidth="750*"/>

                  <tbody>
                    <row>
                      <entry>Matches</entry>

                      <entry>
                        <para>Doubled up words separated by a space, 
                        such as the consecutive “an” in the following
                        sentence.</para>
                        <para>“I bought an an apple.”</para>
                      </entry>
                    </row>

                    <row>
                      <entry>Does not match</entry>

                      <entry>
                        <para>The “that, that” in the following
                        sentence.</para>
                        <para>“But that, that is just unbelievable”,
                        because the first “that” is followed by both a
                        comma and a space rather than only a
                        space.</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </para>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>Closing parenthesis</emphasis>
            <literal>)</literal>
          </entry>

          <entry>
            <literal>^\d+\)</literal>
          </entry>

          <entry>
            <para>
              <informaltable>
                <tgroup cols="2">
                  <colspec colwidth="250*"/>
                  <colspec colwidth="750*"/>

                  <tbody>
                    <row>
                      <entry>Matches</entry>

                      <entry>
                        <para>The sequence number (including the
                        parenthesis) at the beginning of each line in a
                        list such as:</para>
                        <para>
                          <literallayout>
                            1) Apples
                            2) Oranges
                            3) Pears
                          </literallayout>
                        </para>
                      </entry>
                    </row>

                    <row>
                      <entry>Does not match</entry>

                      <entry>
                        <para>Sequence numbers that are not at the
                        beginning of a line</para>
                        <para>
                          <literallayout>
                            Follow these steps:
                            Step 1) Preparation
                            Step 2) …
                          </literallayout>
                        </para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </para>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>Opening bracket</emphasis>
            <literal>[</literal>
          </entry>

          <entry>
            <literal>li[cs]en[cs]e</literal>
          </entry>

          <entry>
            <para>
              <informaltable>
                <tgroup cols="2">
                  <colspec colwidth="250*"/>
                  <colspec colwidth="750*"/>

                  <tbody>
                    <row>
                      <entry>Matches</entry>

                      <entry>
                        <para>The correct “licence” and “license”
                        spellings, as well as the potential “lisence”
                        and “lisense” mispellings</para>
                      </entry>
                    </row>

                    <row>
                      <entry>Does not match</entry>

                      <entry>
                        <para>More egregious mispellings such as
                        “licensse” or “lissense”.</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </para>
          </entry>
        </row>

        <row>
          <entry>
            <emphasis>Opening curly brace:</emphasis>
            <literal>{</literal>
          </entry>

          <entry>
            <literal>\d{4}/\d{1,3}</literal>
          </entry>

          <entry>
            <para>
              <informaltable>
                <tgroup cols="2">
                  <colspec colwidth="250*"/>
                  <colspec colwidth="750*"/>

                  <tbody>
                    <row>
                      <entry>Matches</entry>

                      <entry>
                        <para>Codes such as “1234/5”, “1472/69”, or
                        “9513/842” consisting of four digits, a forward
                        slash, and one to three more digits.</para>
                      </entry>
                    </row>

                    <row>
                      <entry>Does not match</entry>

                      <entry>
                        <para>Codes such as “123/45”, “1472/6985”, or
                        “95133/15746”.</para>
                        <para><emphasis role="bold">Caution:</emphasis>
                        Although the last two codes above are not
                        matched completely, the expression will return
                        the “<emphasis>1472/698</emphasis>” portion of
                        “1472/6985”, as well as the
                        “<emphasis>5133/157</emphasis>” of
                        “95133/15746”.</para>
                      </entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
            </para>
          </entry>
        </row>
      </tbody>
    </tgroup>
  </table>
</section>

<section id="app.regex.many.expressions">
  <title id="app.regex.many.expressions.title">The many expressions</title>

  <warning>
    <para>As seen above, all alphabetic characters preceded by a
    <literal>\</literal> turn into an expression that represents
    <emphasis>not the character itself, but its associated special
    meaning</emphasis>.</para>
  </warning>
  
  <table id="app.regex.characters">
    <title id="app.regex.characters.title">Characters</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry><literal>x</literal></entry>
          <entry>
            <para>The character “x” itself</para>
            <para>Most characters match themselves.</para>
          </entry>
        </row>

        <row>
          <entry><literal>\t</literal></entry>
          <entry>
            <para>The tab character, not the letter “t”.</para></entry>
        </row>

        <row>
          <entry><literal>\n</literal></entry>
          <entry>The newline (line feed) character, not the letter “n”.</entry>
        </row>

        <row>
          <entry><literal>\r</literal></entry>
          <entry>
            <para>The carriage-return character, not the letter “r”.</para>
            <para>similarly, <literal>\R</literal> is any line break character.</para></entry>
        </row>
	  </tbody>
	</tgroup>
  </table>

  <note>
    <para>In OmegaT searches are case insensitive by default: they
    match both uppercase and lowercase characters. You can enable case
    sensitivity as an option for the whole search, and you can also add
    <emphasis role="bold">(?i)</emphasis> before case insensitive sections, and
    <emphasis role="bold">(?-i)</emphasis> before case sensitive sections if you
    want to apply finer control over the case used for searches.</para>
    <para><emphasis role="bold">(?i)o(?-i)megat</emphasis> is a
    case insensitive “o” followed by a case sensitive “megat”.</para>
  </note>

  <table id="app.regex.classes">
    <title id="app.regex.classes.title">Case and classes</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry><literal></literal></entry>
          <entry>
            <para>A word character, generally defined as [A-Za-z0-9_],
            not "w".</para>
            <para>\W is NOT a word character ([^\w]).</para>
          </entry>
        </row>

        <row>
          <entry>\d</entry>
          <entry>A digit, generally defined as [0-9].
		  <para>\D is NOT a digit ([^\d]).</para></entry>
        </row>

        <row>
          <entry>\s</entry>
          <entry>A white space that includes spaces, tabs, line breaks, etc., not "s"
		  <para>\S is NOT a whitespace character ([^\s]).</para></entry>
        </row>

        <row>
          <entry>\h and \v</entry>
          <entry>Horizontal and vertical white space (generally preferred to \s), neither "h" nor "v".
		  <para>\H is NOT a horizontal white space and \V is NOT a vertical white space ([^\h] and [^\v]).</para></entry>
        </row>

		<row>
          <entry>[abc]</entry>
          <entry>a, b, or c
		  <para>A simple class is described by any number characters between [ and ]</para></entry>
        </row>

        <row>
          <entry>[C-X]</entry>
          <entry>A character among the “C through X” letters set
		  <para>A range is described by a character that starts a series, followed by a hyphen, followed by a character that ends the series. Any number of ranges can be defined this way: [a-zA-Z0-9]. A hyphen that is outside a series is a hyphen: [a-z-].</para></entry>
        </row>

        <row>
          <entry>[^\n\r\t]</entry>
          <entry>Any character <emphasis>except</emphasis> a newline, a carriage return, or a tabulation
		  <para>The CARET excludes what follows it.</para></entry>
        </row>


      </tbody>
    </tgroup>
  </table>

  <para>Regular expressions are not limited to alphabetic characters and numerals, of course. They cover the whole Unicode character set. To specify character classes outside the alphabetical range, use Unicode blocs, scripts and categories.</para>

	<para>See also <ulink url="https://www.regular-expressions.info/unicode.html">Unicode Regular Expressions</ulink> for a thorough review of Unicode regular expressions</para>

  <table id="app.regex.unicode.blocs">
	<title id="app.regex.unicode.blocs.title">Unicode blocks, scripts and
	categories</title>
	
	<tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
		<row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
		</row>
      </thead>

      <tbody>
		<row>
          <entry>\p{InGreek}</entry>
          <entry>A character in the Greek block (<ulink
          url="https://unicode.org/reports/tr18/#Blocks">Unicode block</ulink>)
		  <para>\P{InGreek} is a character NOT in the Greek block</para></entry>
		</row>

		<row>
          <entry>\p{IsHan}</entry>
          <entry>A Han character as found in CJK languages (<ulink
          url="https://unicode.org/reports/tr18/#Script_Property">Unicode script</ulink>)</entry>
		</row>
		
		<row>
          <entry>\p{Lu}</entry>
          <entry>An uppercase letter (<ulink
          url="https://unicode.org/reports/tr18/#General_Category_Property">Unicode category</ulink>)</entry>
		</row>

		<row>
          <entry>\p{Sc}</entry>
          <entry>A currency symbol, another Unicode category</entry>
		</row>

      </tbody>
	</tgroup>
  </table>

  <para>Locations (boundaries) are not part of the match. They just
  specify where the match should be.</para>

  <table id="app.regex.boundary.matchers">
	<title id="app.regex.boundary.matchers.title">Locations</title>
	
	<tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
		<row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
		</row>
      </thead>

      <tbody>
		<row>
          <entry>^</entry>
          <entry>The beginning of the line</entry>
		</row>

		<row>
          <entry>$</entry>
          <entry>The end of the line</entry>
		</row>

		<row>
          <entry>\b</entry>
          <entry>A word boundary</entry>
		</row>

		<row>
          <entry>\B</entry>
          <entry>NOT a word boundary</entry>
		</row>

		<row>
          <entry>(?=u)</entry>
          <entry>Before the expression “u”</entry>
		</row>

		<row>
          <entry>(?!u)</entry>
          <entry>NOT before the expression “u”</entry>
		</row>

		<row>
          <entry>(?&lt;=q)</entry>
          <entry>After the expression “q”</entry>
		</row>

		<row>
          <entry>(?&lt;!q)</entry>
          <entry>NOT after the expression “q”</entry>
		</row>
		
	  </tbody>
	</tgroup>
  </table>
</section>

<section id="app.regex.examples">
  <title id="app.regex.examples.title">Examples</title>
  
  <table id="regex.examples">
    <title id="regex.examples.title">Examples of regular expressions
	that use the expressions above</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry>Regular expression</entry>
          <entry>Finds the following:</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>(\b\w+\b)\s\1\b</entry>
          <entry>double words</entry>
        </row>

        <row>
          <entry>[\.,]\s*[\.,]+</entry>
          <entry>comma or a period, followed by spaces and yet another comma
          or period</entry>
        </row>

        <row>
          <entry>\. \s+$</entry>
          <entry>extra spaces after the period at the end of the line</entry>
        </row>

        <row>
          <entry>\s+a\s+[aeiou]</entry>
          <entry>English: words, beginning with vowels, should generally be
          preceded by &quot;an&quot;, not &quot;a&quot;</entry>
        </row>

        <row>
          <entry>\s+an\s+[^aeiou]</entry>
          <entry>English: the same check as above, but concerning consonants
          (&quot;a&quot;, not &quot;an&quot;)</entry>
        </row>

        <row>
          <entry>\s{2,}</entry>
          <entry>more than one space</entry>
        </row>

        <row>
          <entry>\.[A-Z]</entry>
          <entry>Period, followed by an upper-case letter - possibly a space
          is missing between the period and the start of a new
          sentence?</entry>
        </row>

        <row>
          <entry>\bis\b</entry>
          <entry>search for “is”, not “this” or “isn’t” etc.</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
</section>



<section id="app.regex.tools">
  <title id="app.regex.tools.title">References</title>

  <para>Although OmegaT does not offer fancy coloring for your regular
  expressions, you can get a lot of practice by using the <link linkend="windows.text.search"
  endterm="windows.text.search.title"/> window since OmegaT does color the matching results.</para>

  <para>The Java technical reference is useful as a canonical reference.

  <variablelist>
	<varlistentry id="app.regex.java">
	  <term id="app.regex.java.title"><ulink url="&javaregex;">Java Regex
	  documentation</ulink></term>
	  <listitem><para>The official reference for regular expressions used in
	  Java.</para></listitem>
	</varlistentry>
  </variablelist>
  
  If you want to know more about regular expressions, the two following resources have also proved very useful:

  <variablelist>
	<varlistentry id="app.regex.tools.regex101">
	  <term id="app.regex.tools.regex101.title"><ulink url="https://regex101.com">https://regex101.com</ulink></term>
	  <listitem><para>An online regular expression matcher where you enter the text you want to practice on and the regular expressions that you want to try.</para></listitem>
	</varlistentry>
	<varlistentry id="app.regex.tools.regular.expression.info">
	  <term id="app.regex.tools.regular.expression.info.title"><ulink url="https://www.regular-expressions.info">https://www.regular-expressions.info</ulink></term>
	  <listitem><para>One of the most thorough regular expression references on the web.</para></listitem>
	</varlistentry>
  </variablelist>

  OmegaT does not support either site in any way and if you find interesting references in your language, we would love to hear about them.
  </para>
</section>
</section>
