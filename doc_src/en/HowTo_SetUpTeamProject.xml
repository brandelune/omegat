<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../docbook-xml-4.5/docbookx.dtd">
<section id="how.to.setup.team.project">
  <title id="how.to.setup.team.project.title">Set up a team
  project</title>

  <para>Managing a team project calls for some knowledge of servers, as well
  as of either the <emphasis>SVN</emphasis> or <emphasis>Git</emphasis>
  version control system.</para>

  <para>As information on those topics is readily available, this manual
  limits itself to describing their use in the context of an OmegaT team
  project.</para>

  <para>Broadly speaking, a team project requires setting up an SVN or Git
  repository to host the project, adding it to the repository, and setting up
  access for the translators.</para>

  <section id="how.to.setup.team.project.prepare.the.repository">
    <title id="how.to.setup.team.project.prepare.the.repository.title">Preparations</title>

    <orderedlist>
      <listitem>
        <para>Create an SVN or Git repository on a server accessible to the
        translators.</para>

        <para>In simplified terms, a repository is simply a folder you set up
        on a remote server to host your OmegaT team projects. This can
        normally be done through a web interface, a graphical application, or
        the command line. Consult the documentation for your server or hosting
        service for details.</para>
      </listitem>

      <listitem>
        <para>Download a local copy of the repository (SVN
        <command>checkout</command> or Git <command>clone</command>).</para>

        <para>The main principle of version control is that you work on your
        local system, and regularly synchronize changes between your local
        copy and the remote server. This means you need to prepare a local
        copy of the repository you will use to upload team projects to the
        server.</para>

        <note>
          <para>Your local repository is not the folder that OmegaT will use
          for the team project. It is used to add the initial project to the
          server, and can also be used for maintenance tasks, such as deleting files, that cannot be
          performed directly within OmegaT. Therefore, it is recommended that
          you keep your repository folder in a hierarchy separate from the one
          used or your OmegaT projects.</para>
        </note>
      </listitem>
    </orderedlist>
  </section>

  <section id="how.to.setup.team.project.project.add.to.repository">
    <title id="how.to.setup.team.project.project.add.to.repository.title">Add
    your project</title>

    <para>Make sure you are in your local repository, and either create a new
    OmegaT project, or copy an existing local project that you want to convert
    to a team project.</para>

    <para>Once your project is set up, you will have to register it in your
    version control system, and upload it to the remote server.</para>

    <itemizedlist>
      <listitem>
        <para>Set up the project</para>

        <para>If you are creating a new empty project, you can follow the
        <link linkend="introduction.create.and.open.new.project">usual GUI procedure</link>,
        or create it directly from the command line: <itemizedlist>
            <listitem>
              <para><command>java -jar OmegaT.jar team init
              <parameter>&lt;source language&gt;</parameter>
              <parameter>&lt;target language&gt;</parameter></command></para>

              <para>This command also automatically registers the project in
              the version control system.</para>
            </listitem>
          </itemizedlist></para>

        <para>If you want to change the default project properties or use
        project-specific filters or segmentation, it is easiest to make the
        necessary changes at this stage to ensure that the
        <filename>omegat.project</filename> file reflects those changes and that
        the <filename class="directory">omegat/</filename> subfolder contains
        the <filename>filters.xml</filename> and
        <filename>segmentation.conf</filename> files.</para>

		<para>Similarly add any relevant lists of spellchecker files you want to
		make available to everyone working on the project. See <link
		linkend="project.folder.omegat.spellcheck">spellchecker files</link> for
		details.</para>

        <para>If you are converting an existing project, make sure you delete
        any files in the project that you do not need or want to upload to the
        server before proceeding to the next step.</para>
      </listitem>

      <listitem>
        <para>Register the project in version control</para>

        <para>If you created the project from the GUI, you then have to
        explicitly add it to the version control system
        (<command>add</command> in both SVN and Git).</para>
      </listitem>

      <listitem>
        <para>Upload the project to the server</para>

        <para>Finally, publish your project to the remote server
        (<command>commit</command> in SVN, <command>commit</command> and
        <command>push</command> in Git).</para>
      </listitem>

      <listitem>
        <para>Add the files to translate and any other resources.</para>

        <para>Copy the files to translate to the source/ folder, and use your
        SVN or Git client, or the command line, to add and publish them to the
        repository. Source files can also be added from OmegaT using the <link
        endterm="menus.project.commit.source.files.title"
        linkend="menus.project.commit.source.files"/> command in the <link
        endterm="menus.project.title" linkend="menus.project"/> menu.</para>

        <para>You must use your SVN or Git client or the command line to add
        and publish any dictionaries, glossaries, translation memories or
        other files you want to include in the project.</para>

        <para>This step can be performed before the registering and publishing
        the project for the first time, and can also be used to add new files,
        or update existing ones after the project has been created.</para>

        <note>
          <para>OmegaT only offers limited two-way interaction with the
          server. The only two files modified by OmegaT are:</para>

          <itemizedlist>
            <listitem>
              <para><filename> <link
              linkend="project.folder.project.save.tmx">project_save.tmx</link>
              </filename></para>
            </listitem>

            <listitem>
              <para><filename> <link
              linkend="project.folder.glossary.txt">glossary.txt</link>
              </filename></para>
            </listitem>
          </itemizedlist>

          <para>Source and target files can be modified locally and
          uploaded to the server using the <link
          endterm="menus.project.commit.source.files.title"
          linkend="menus.project.commit.source.files"/> and <link
          linkend="menus.project.commit.target.files" endterm="menus.project.commit.target.files.title"/> commands from
          the <link linkend="menus.project" endterm="menus.project.title"/>
          menu.</para>

          <para>The <command>Commit...</command> commands must be run
          immediately after modifying a file, before saving or reloading the
          project, otherwise they will be overwritten by the files on the
          server when OmegaT synchronizes the project.</para>

          <para>From OmegaT, all other files are read-only. Even if a
          translator <emphasis>modifies</emphasis> them locally or attempts to
          <emphasis>delete</emphasis> them, they will be overwritten with the
          file on the server anytime the project is opened, saved, reloaded,
          or closed.</para>

          <para>The team project administrator must use an SVN or Git client
          to <emphasis role="bold">modify</emphasis> or <emphasis
          role="bold">delete</emphasis> those files.</para>
        </note>
      </listitem>
    </itemizedlist>
  </section>

  <section id="how.to.setup.team.project.setup.translator.access">
    <title id="how.to.setup.team.project.setup.translator.access.title">Set up
    access</title>

    <para>After the project is ready and has been uploaded to the server, the
    team project administrator has to set up access for the translators.
    Accessing a team project requires the following information:</para>

    <itemizedlist>
      <listitem>
        <para>Project location</para>

        <para>Administrators have two options for sending the location of the
        project to the translators:</para>

        <orderedlist>
          <listitem>
            <para>Send a URL and ask the translators to use the <link linkend="menus.project.download.team.project" endterm="menus.project.download.team.project.title"/> command to
            create a local copy of the project on their own system.</para>
          </listitem>

          <listitem>
            <para>Send an <filename>omegat.project</filename> file containing
            the project URL, and then have the translators copy it to an empty
            folder and open it in OmegaT. This can be useful if the project is
            set up to use different <link
            linkend="how.to.setup.team.project.mapping.parameters">mappings</link>
            for each translator. Here is an example of a reference to a 
            Git repository:</para>

            <programlisting>&lt;repositories&gt; &lt;repository type="git"
        url="https://repo_for_OmegaT_team_project.git"&gt; &lt;mapping
        local="" repository=""/&gt; &lt;/repository&gt;
        &lt;/repositories&gt;</programlisting>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>Translator credentials</para>
        
        <orderedlist>

          <listitem>
            <para>Projects on a hosting service</para>
            <para>The translators will have to create an account for the service, and send their user name to the team project administrator.</para>
            <para>The administrator will then grant write access to the repository to those accounts.</para>
          </listitem>

          <listitem>
            <para>Projects on a self-hosted server</para>
            <para>If the server is self-hosted that does not have a provision for translators to register an account themselves, the team project administrator must create accounts with write access for the translators.</para>
            <para>After creating the accounts, the administrator must send the translators their individual credentials.</para> 
          </listitem>

        </orderedlist>
        
      </listitem>

      <listitem>
        <para>Confirming access</para>

        <para>After the team project administrator confirms that a translator
        has been able to open the team project, it is a good idea to make sure
        that the <link linkend="menus.tools.statistics">project
        statistics</link> are the same for both the administrator (on the
        server) and the translator (locally).</para>

        <para>If they do not match, make sure the
        <filename>filters.xml</filename> and
        <filename>segmentation.conf</filename> files are under version
        control.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="how.to.setup.team.project.selective.sharing">
    <title id="how.to.setup.team.project.selective.sharing.title">Selective sharing</title>

    <para>The above process describes the most common scenario, in which the
    team project administrator has full control of the project and all files
    (and statistics) are identical in all instances of the project, both on
    the server and the local systems of the translators.</para>

    <para>It is also possible to use a team project configuration where
    several translators share the <filename>project_save.tmx</filename> file,
    and only a subset of the other files.</para>

    <para>The basic procedure is the essentially the same, except that the
    team project administrator does not add every file to the
    version-controlled project on the server. The remaining files are either
    copied by the translators themselves, or mappings that synchronize files
    from other locations are defined.</para>

    <para>Mappings can be added via the OmegaT user interface using <link
    linkend="dialogs.project.properties.repository.mapping.title"
    endterm="dialogs.project.properties.repository.mapping.title"/> in the <link
    linkend="dialogs.project.properties"
    endterm="dialogs.project.properties.title"/> dialog, or by editing the <link
    linkend="project.folder.omegat.project.file.title"
    endterm="project.folder.omegat.project.file.title"/> file.</para>
  </section>

  <section id="how.to.setup.team.project.mapping.parameters">
    <title id="how.to.setup.team.project.mapping.parameters.title">Mapping
    parameters</title>

    <para>A list of mapping parameters is presented below, and examples of
    their use is provided in the next section.</para>

    <variablelist>
      <varlistentry>
        <term>repository type</term>

        <listitem>
          <para>This can be either <emphasis>http</emphasis> (which includes
          https), <emphasis>svn</emphasis>, <emphasis>git</emphasis>, or
          <emphasis>file</emphasis>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>repository url</term>

        <listitem>
          <para>Remote location or directory of the files to translate.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mapping local</term>

        <listitem>
          <para>Name of the local folder or file, relative to the root of the
          OmegaT project.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mapping repository</term>

        <listitem>
          <para>Name of the remote folder or file, relative to the repository
          url.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>excludes</term>

        <listitem>
          <para>Use wildcards (following the Apache Ant style: *, ?, **) to
          add patterns for files that should not be part of the mapping. Use a
          semicolon to separate different patterns.</para>

          <para>Example: <userinput>**/excludedfolder/**;*.txt</userinput>
          excludes files that have /excludedfolder/ in the path, as well as
          files with the <filename>.txt</filename> extension.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>includes</term>

        <listitem>
          <para>As above, but for files that should be part of the mapping.
          Since files are included by default unless specifically excluded,
          this option is only necessary to specify exceptions to an exclusion
          pattern.</para>

          <para>Example: <userinput>**/*.docx</userinput> to add all .docx
          files in the project, even if they are located in an excluded
          folder.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="how.to.setup.team.project.example.mappings">
    <title id="how.to.setup.team.project.example.mappings.title">Example
    mappings</title>

    <para>Default project mapping: <programlisting>&lt;repositories&gt;
    &lt;repository type="svn"
    url="https://repo_for_OmegaT_team_project"&gt; &lt;mapping
    local="" repository=""/&gt; &lt;/repository&gt;
    &lt;/repositories&gt;</programlisting></para>

    <para>All the contents of
    <filename>https://repo_for_OmegaT_team_project</filename> are mapped to
    the local OmegaT project</para>

    <para>Mapping for projects in a subdirectory of the repository:
    <programlisting>&lt;repositories&gt; &lt;repository type="svn"
    url="https://repo_for_All_OmegaT_team_projects"&gt; &lt;mapping
    local="" repository="En-US_DE_project"/&gt;
    &lt;/repository&gt; &lt;/repositories&gt;</programlisting></para>

    <para>All the contents of
    <filename>https://repo_for_All_OmegaT_team_projects/En-US_DE_project</filename>
    are mapped to the local OmegaT project.</para>

    <para>Mapping for additional sources from a remote repository, with
    filters: <programlisting> &lt;repositories&gt; &lt;repository type="svn"
    url="https://repo_for_All_OmegaT_team_project_sources"&gt;
    &lt;mapping local="source/subdir" repository=""&gt;
    &lt;excludes&gt;**/*.bak&lt;/excludes&gt;
    &lt;includes&gt;readme.bak&lt;/includes&gt; &lt;/mapping&gt;
    &lt;/repository&gt; &lt;/repositories&gt;</programlisting></para>

    <para>Everything in
    <filename>https://repo_for_All_OmegaT_team_project_sources</filename> is
    mapped to the local OmegaT project source folder, except files with a
    <filename>.bak</filename> extension. However, the
    <filename>readme.bak</filename> is also included.</para>

    <para><programlisting>Mapping for extra source files from the web:
    &lt;repository type="http"
    url="https://github.com/omegat-org/omegat/raw/master/"&gt;
    &lt;mapping local="source/Bundle.properties"
    repository="src/org/omegat/Bundle.properties"/&gt;
    &lt;/repository&gt;</programlisting></para>

    <para>The remote file
    <filename>https://github.com/omegat-org/omegat/raw/master/src/org/omegat/Bundle.properties</filename>
    is mapped to the local file
    <filename>source/Bundle.properties</filename>.</para>

    <para>Mapping with renaming: <programlisting>&lt;repository
    type="http"
    url="https://github.com/omegat-org/omegat/raw/master/"&gt;
    &lt;mapping local="source/readme_tr.txt"
    repository="release/readme.txt"/&gt;
    &lt;/repository&gt;</programlisting></para>

    <para>The remote file
    <filename>https://github.com/omegat-org/omegat/raw/master/release/readme.txt</filename>
    is mapped to the local file
    <filename>source/readme_tr.txt</filename>.</para>

    <para>This makes it possible to rename the file to translate.</para>

    <para>Local file mapping: <programlisting>&lt;repository
    type="file" url="/home/me/myfiles"&gt; &lt;mapping
    local="source/file.txt" repository="my/file.txt"/&gt;
    &lt;mapping local="source/file2.txt"
    repository="some/file.txt"/&gt;
    &lt;/repository&gt;</programlisting></para>

    <para>The local file <filename>/home/me/myfiles/my/file.txt</filename> is
    mapped to the local file <filename>source/file.txt</filename> and
    <filename>/home/me/myfiles/some/file.txt</filename> is mapped to the local
    file <filename>source/file2.txt</filename>.</para>

    <warning>
      <para>The project will not load if a file specified in a mapping does
      not exist.</para>
    </warning>

    <para>You can add as many mappings as you want, but only in the context of
    a team project. In other words, one of the mappings must include the
    <filename>omegat.project</filename> file. Although the mapping feature is
    primarily intended for gathering source files from disparate locations, it
    can also be used for other types of files.</para>

    <note>
      <para><emphasis role="bold">The <filename>omegat.project </filename>file
      and mappings</emphasis></para>

      <para>When you create a project and commit it to a repository, the
      <filename>omegat.project</filename> file does not contain any
      mappings.</para>

      <para>Downloading the project converts its to a local team project and
      adds the default mapping to the local version of that file. However, the
      <filename>omegat.project</filename> file on the server is not modified
      and still does not contain any mappings. Loading a project copies all
      files in the repository on the server, including the
      <filename>omegat.project</filename> file, to your local repository. If
      the version of that file on the server does not contain any mappings,
      only the existing local mappings are reapplied. However, if a version of
      the file containing mappings has been uploaded to the server, they take
      precedence and any local changes to the mappings are lost.</para>
    </note>
  </section>
  
</section>
