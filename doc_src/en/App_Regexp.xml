<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../docbook-xml-4.5/docbookx.dtd"
[<!ENTITY % manualvariables SYSTEM "manualvariables.mod"> %manualvariables;]>

<appendix id="appendix.regexp">
  <title id="appendix.regexp.title">Regular expressions</title>

  <para>This appendix is intended for users interested in exploring a
  powerful way to boost their productivity. Although seen as daunting and
  complex, even the simplest regular expressions (often abbreviated
  <emphasis>regex</emphasis> or <emphasis>regexp</emphasis>) are extremely
  useful, not only in OmegaT, but in many other applications you might use
  on a day-to-day basis.</para>

  <para>Only the fundamentals most useful to translators are covered. The
  <link linkend="appendix.regex.tools" endterm="appendix.regex.tools.title"/>
  section at the end of this appendix provides a few starting points to
  explore advanced or complex uses beyond the scope of this manual. If you need help for a specific case, you can also ask questions in the various support channels.</para>
  
  <para>Regular expressions generally use a combination of letters, digits,
  and symbols (collectively known as <emphasis>characters</emphasis>) to
  define an <emphasis>expression</emphasis> that represents a specific text
  pattern.</para>

  <para>Here are a few examples.
    <variablelist>
      <varlistentry>
        <term>[0-9]</term>
        <listitem><para>Any single digit from 0 to 9.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>\w+</term>
        <listitem><para>Represents one or more “word characters”, namely the
        letters of the alphabet, digits, as well as the hyphen and
        underscore symbols.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>\h?</term>
        <listitem><para>Represents zero or one horizontal whitespace
        character (this includes regular and non-breaking spaces as well as
        tabs, but not line break characters, which belong to the “vertical
        whitespace” category (\v).)</para>
        </listitem>
      </varlistentry>
    </variablelist>    
  </para>
  
  <para>Many OmegaT functions rely on regular expressions or make them
    available as an option:

  <variablelist>
    <varlistentry>
      <term>Searches</term>
      <listitem>
        <para>OmegaT searches include a <link
        linkend="windows.text.search.methods.regex"
        endterm="windows.text.search.methods.regex.title"/> option that
        allows you to make extremely powerful searches across your
        files.</para>
        <para>The same option in the <link linkend="windows.text.replace"
        endterm="windows.text.replace.title"/> dialog allows you to apply
        regular expressions to both the search and replaced text.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Custom tags</term>
      <listitem>
        <para>Custom tags are tags defined with regular expressions that are
        handled exactly like native OmegaT tags. See <link
        linkend="dialogs.preferences.tag.processing.regular.expressions.for.custom.tags"
        endterm="dialogs.preferences.tag.processing.regular.expressions.for.custom.tags.title"/>
        for details.</para>
        <para>Use the <code>|</code> (OR) character to separate individual
          tag definitions.</para>
        </listitem>
    </varlistentry>

    <varlistentry>
      <term>Flagged fragments</term>
      <listitem>
        <para><link
        linkend="dialogs.preferences.tag.processing.regular.expressions.for.fragments.that.should.be.removed.from.translation"
        endterm="dialogs.preferences.tag.processing.regular.expressions.for.fragments.that.should.be.removed.from.translation.title"/>
        allow you to define strings that OmegaT will mark in red by default,
        and treat as extraneous tags for validation purposes.</para>
        <para>Use the <code>|</code> (OR) character to separate individual
        fragment definitions.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Segmentation</term>
      <listitem>
        <para>Segmentation rules and language patterns are defined with
        regular expressions. You can modify them freely to improve the
        segmentation of a document or add additional general rules. See
        <link linkend="dialogs.preferences.segmentation.setup"
        endterm="dialogs.preferences.segmentation.setup.title"/> for
        details.</para>
        <para>Segmentation or exception rules define the position in a
        segment where a split will, or will not, be made. Two regular
        expressions are required to define that position: a “before”
        expression to define the text pattern ahead of where the rule should
        apply, and an “after” expression to define the text pattern following
        that position.</para>
        <para>A language pattern that matches the source language of the project will apply to that project.</para></listitem>
    </varlistentry>
  </variablelist>
  </para>

  <section id="appendix.regexp.basic.principles">
	<title id="appendix.regexp.basic.principles.title">Basic principles</title>
	<para>Regular expressions are used to find text. A given expression will
	<emphasis>match</emphasis> a piece of text, or not.</para>
	<para>Each character used in an expression has an effect on the match.</para>
	<para>Some characters have special effects.</para>
	<warning><para>Regular expressions cannot be used to match text decorations like <emphasis>bold</emphasis>, <emphasis>italics</emphasis>, etc.</para></warning>
	<para>There are 4 rules to remember.</para>

	<variablelist>
	  <varlistentry>
		<term>Most characters match
		themselves</term>
		<listitem>
		  <para>Their only effect is to <emphasis>look for
		  themselves</emphasis> in the string.</para>
		  <para>For example, the 7 letters that compose the word
		  <emphasis>example</emphasis> only have the effect of looking for
		  themselves in the text, in that same order, i.e., the string
		  <emphasis>example</emphasis>.</para>
		</listitem>
	  </varlistentry>
	  <varlistentry>
		<term>Most alphabetical characters have a hidden special effect</term>
		<listitem>
		  <para>That special effect must be triggered by a special effect
		  character, otherwise, the character matches itself.</para>
		  <para>For example, <emphasis>r</emphasis> is a normal character but
		  also has a hidden special effect, triggered by preceding it with
		  <emphasis>\</emphasis>, in which case it becomes
		  <emphasis>\r</emphasis> and has the special effect of matching a
		  <emphasis>carriage return character</emphasis> (by the way,
		  <emphasis>\R</emphasis> has the effect of matching <emphasis>any line
		  break character</emphasis>).</para>
		  <note><para>As of the versions of Java on which OmegaT is built, only
		  <emphasis>i j l m o y</emphasis> both in lower and upper case have no
		  hidden special effect. We will not describe all the effect of the
		  other characters in this manual.</para></note>
		</listitem>
	  </varlistentry>
	  <varlistentry>
		<term>12 characters have a special effect by default</term>
		<listitem>
		  <para>To match themselves, the special effect must be
		  disabled, by a special effect character.</para>
		  <para>For example, <emphasis>.</emphasis> has the default special effect of matching <emphasis>any one character</emphasis>.</para>
		  <para>To find a normal period, it is necessary to disable the special
		  effect with <emphasis>\</emphasis>, in which case it becomes
		  <emphasis>\.</emphasis> and matches only a period.</para>
		  
		  <para>As of the versions of Java on which OmegaT is built, the 12 characters are
		  <emphasis>the backslash \, the caret ^, the dollar sign $, the period or dot ., the vertical bar or pipe symbol |, the question mark ?, the asterisk or star *, the plus sign +, the opening parenthesis (, the closing parenthesis ), the opening square bracket [, and the opening curly brace {.</emphasis>
		  <variablelist>
			<varlistentry>
			  <term>\</term>
			  <listitem><para>The BACKSLASH either disables or enables  a special effect.
			  <example><emphasis role="bold">\.</emphasis> = disables the period special effect that makes it match any character, and turns it into a plain period.</example>
			  <example><emphasis role="bold">\b</emphasis> = not a b anymore but a “word boundary”</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>^</term>
			  <listitem><para>As the first character of an expression, the CARET matches the beginning of a line.
			  <example><emphasis role="bold">^A</emphasis> = an upper-case A at the beginning of a line.</example></para>
			  <para>As the first character of a class (something that is enclosed by square brackets, see below), the CARET negates what follows it.
			  <example><emphasis role="bold">[^abc]</emphasis> = NEITHER a, nor b, nor c.</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>$</term>
			  <listitem><para>As the last character of an expression, the DOLLAR sign matches the end of a line.
			  <example><emphasis role="bold">^$</emphasis> = an empty line (there is nothing between the beginning and the end of the line).</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>.</term>
			  <listitem><para>The PERIOD matches any one character.
			  <example><emphasis role="bold">^...$</emphasis> = A three characters “string” between the beginning and the end of a line.</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>|</term>
			  <listitem><para>The VERTICAL BAR allows an alternative between two possibilities (OR).
			  <example><emphasis role="bold">^An&nbsp;|^The&nbsp;</emphasis> = the string “An ” OR the string “The ” at the beginning of a line.</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>?</term>
			  <listitem><para>The QUESTION MARK quantifies the expression that precedes it as 0 or 1 instances of that expression.<example><emphasis role="bold">&nbsp;an?&nbsp;</emphasis> = a space, followed by a, followed by 0 or 1 n, followed by a space.</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>*</term>
			  <listitem><para>The ASTERISK quantifies the expressions that precedes it as 0 or MORE instances of that expression.<example><emphasis role="bold">\w+</emphasis> = 0 or more WORD characters.</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>+</term>
			  <listitem><para>The PLUS quantifies the expression that precedes it as 1 or MORE instances of that expression.<example><emphasis role="bold">[\h\v]+</emphasis> = 1 or MORE instances of either a horizontal white space or a vertical white space.</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>(</term>
			  <listitem><para>The OPENING PARENTHESIS opens a group that must be closed by a CLOSING PARENTHESIS. The group contents is memorized and can be called by a special effect number.<example><emphasis role="bold">(\b\w+\b)\h\1\b</emphasis> = a group of 1 or more WORD characters that begin at a word boundary (\b) and ends at a word boundary (the second \b). That group defines a word, that is followed by a horizontal white space, followed by the contents of the group (the word), before a word boundary, which means, a word followed by itself.</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>)</term>
			  <listitem><para>The CLOSING PARENTHESIS closes a group and cannot be used on its own without triggering an error.</para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>[</term>
			  <listitem><para>The OPENING SQUARE BRACKET opens a range of characters which must be closed by a CLOSING SQUARE BRACKET.<example><emphasis role="bold">li[cs]en[cs]e</emphasis> = all the instances of a misspelled license.</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>{</term>
			  <listitem><para>The OPENING CURLY BRACE opens a quantifier that must be closed by a CLOSING CURLY BRACE. The quantifier can be an exact number, a minimum, a maximum or a range.<example><emphasis role="bold">\d{4}/\d{1,}</emphasis> = 4 digits followed by a / followed by at least 1 digit.</example></para></listitem>
			</varlistentry>
		  </variablelist>
		</para>
		
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>The character <emphasis>\</emphasis> is a very special character</term>
	  <listitem><para>As you have seen above, the character <emphasis>\</emphasis> has a special effect by default and that special effect is to either trigger or disable special effects in other characters. When it precedes a character that has no special effect (neither natural nor hidden), it has no effect.</para>
	  <para><emphasis>\</emphasis> can be disabled by another <emphasis>\</emphasis>, in which case it becomes <emphasis>\\</emphasis> and matches what is called a <emphasis>backslash</emphasis>.</para></listitem>
	</varlistentry>
  </variablelist>
  
  
  <table id="appendix.regex.characters">
    <title id="appendix.regex.characters.title">Characters</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>x</entry>
          <entry>The character x itself
		  <para>Most characters match themselves.</para></entry>
        </row>


        <row>
          <entry>\t</entry>
          <entry>The tab character
		  <para>The \ triggers the special effect “this is a tab, not a t”.</para></entry>
        </row>

        <row>
          <entry>\n</entry>
          <entry>The newline (line feed) character
		  <para>The \ triggers the special effect “this is a newline, not an n”.</para></entry>
        </row>

        <row>
          <entry>\r</entry>
          <entry>The carriage-return character
		  <para>\R is any line break character.</para></entry>
        </row>
	  </tbody>
	</tgroup>
  </table>

  <table id="appendix.regex.classes">
    <title id="appendix.regex.classes.title">Classes and case</title>

	<note><para>In OmegaT a search is by default case-insensitive: it will match upper-case characters as well as lower-case characters. You can enable case sensitivity as an option for the whole search, but if you want finer settings you can mix <emphasis role="bold">(?i)</emphasis> before case-insensitive parts and <emphasis role="bold">(?-i)</emphasis> before case sensitive parts.</para></note>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>\w</entry>
          <entry>A word character, generally defined as [A-Za-z0-9_] but in Java as [\p{Alpha}\p{gc=Mn}\p{gc=Me}\p{gc=Mc}\p{Digit}\p{gc=Pc}\p{IsJoin_Control}].
		  <para>\W is NOT a word character ([^\w]).</para></entry>
        </row>

        <row>
          <entry>\d</entry>
          <entry>A digit, generally defined as [0-9].
		  <para>\D is NOT a digit.</para></entry>
        </row>

        <row>
          <entry>\s</entry>
          <entry>A white space that includes spaces, tabs, line breaks, etc.
		  <para>\S is NOT a whitespace character ([^\s]).</para></entry>
        </row>

        <row>
          <entry>\h and \v</entry>
          <entry>Horizontal and vertical white space (generally preferred to \s).
		  <para>\H is NOT a horizontal white space and \V is NOT a vertical white space.</para></entry>
        </row>

		<row>
          <entry>[abc]</entry>
          <entry>a, b, or c
		  <para>A simple class is described by any number characters between [ and ]</para></entry>
        </row>

        <row>
          <entry>[C-X]</entry>
          <entry>A character among the “C through X” letters set
		  <para>A range is described by a character that starts a series, followed by a hyphen, followed by a character that ends the series. Any number of ranges can be defined this way: [a-zA-Z0-9]. A hyphen that is outside a series is a hyphen: [a-z-].</para></entry>
        </row>

        <row>
          <entry>[^\n\r\t]</entry>
          <entry>Any character <emphasis>except</emphasis> a newline, a carriage return, or a tabulation
		  <para>The CARET excludes what follows it.</para></entry>
        </row>

        <row>
          <entry>(?i)o(?-i)megat</entry>
          <entry>A case-insensitive “o” followed by a case sensitive “megat”.
		  <para>The HYPHEN cancels the “case-insensitive” mode.</para></entry>
        </row>

      </tbody>
    </tgroup>
  </table>
</section>


<table id="appendix.regex.unicode.blocs">
  <title id="appendix.regex.unicode.blocs.title">Unicode blocks, scripts and
  categories</title>

  <tgroup align="left" cols="2" rowsep="1">
    <colspec align="left" colnum="1"/>

    <thead>
      <row>
        <entry align="left">Expression</entry>
        <entry align="left">Match</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry>\p{InGreek}</entry>
        <entry>A character in the Greek block (simple <ulink
        url="&javaregex;#ubc">
        block</ulink>)</entry>
      </row>

      <row>
        <entry>\P{InGreek}</entry>
        <entry>A character NOT in the Greek block</entry>
      </row>

      <row>
        <entry>\p{IsHan}</entry>
        <entry>A Han character as found in CJK languages (simple <ulink
        url="&javaregex;#usc">
        script</ulink>)</entry>
      </row>
	  
      <row>
        <entry>\p{Lu}</entry>
        <entry>An uppercase letter (simple <ulink
        url="&javaregex;#ubc">
        category</ulink>)</entry>
      </row>

      <row>
        <entry>\p{Sc}</entry>
        <entry>A currency symbol</entry>
      </row>

    </tbody>
  </tgroup>
</table>

<table id="appendix.regex.boundary.matchers">
  <title id="appendix.regex.boundary.matchers.title">Locations</title>

  <para>Locations (boundaries) are not part of the match. They just specify
  where the match should be.</para>
  
  <tgroup align="left" cols="2" rowsep="1">
    <colspec align="left" colnum="1"/>

    <thead>
      <row>
        <entry align="left">Expression</entry>
        <entry align="left">Match</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry>^</entry>
        <entry>The beginning of the line</entry>
      </row>

      <row>
        <entry>$</entry>
        <entry>The end of the line</entry>
      </row>

      <row>
        <entry>\b</entry>
        <entry>A word boundary</entry>
      </row>

      <row>
        <entry>\B</entry>
        <entry>NOT a word boundary</entry>
      </row>

      <row>
        <entry>(?=u)</entry>
        <entry>Before the character “u”</entry>
      </row>

      <row>
        <entry>(?!u)</entry>
        <entry>NOT before the character “u”</entry>
      </row>

      <row>
        <entry>(?&lt;=q)</entry>
        <entry>After the character “q”</entry>
      </row>

      <row>
        <entry>(?&lt;!q)</entry>
        <entry>NOT after the character “q”</entry>
      </row>
	  
	</tbody>
  </tgroup>
</table>


<section id="appendix.regexp.examples">
  <title id="appendix.regexp.examples.title">Examples</title>
  
  <table id="regex.examples">
    <title id="regex.examples.title">Examples of regular expressions
	that use the expressions above</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry>Regular expression</entry>
          <entry>Finds the following:</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>(\b\w+\b)\s\1\b</entry>
          <entry>double words</entry>
        </row>

        <row>
          <entry>[\.,]\s*[\.,]+</entry>
          <entry>comma or a period, followed by spaces and yet another comma
          or period</entry>
        </row>

        <row>
          <entry>\. \s+$</entry>
          <entry>extra spaces after the period at the end of the line</entry>
        </row>

        <row>
          <entry>\s+a\s+[aeiou]</entry>
          <entry>English: words, beginning with vowels, should generally be
          preceded by &quot;an&quot;, not &quot;a&quot;</entry>
        </row>

        <row>
          <entry>\s+an\s+[^aeiou]</entry>
          <entry>English: the same check as above, but concerning consonants
          (&quot;a&quot;, not &quot;an&quot;)</entry>
        </row>

        <row>
          <entry>\s{2,}</entry>
          <entry>more than one space</entry>
        </row>

        <row>
          <entry>\.[A-Z]</entry>
          <entry>Period, followed by an upper-case letter - possibly a space
          is missing between the period and the start of a new
          sentence?</entry>
        </row>

        <row>
          <entry>\bis\b</entry>
          <entry>search for “is”, not “this” or “isn’t” etc.</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
</section>



<section id="appendix.regex.tools">
  <title id="appendix.regex.tools.title">References</title>

  <para>Although OmegaT does not offer fancy coloring for your regular
  expressions, you can get a lot of practice by using the <link linkend="windows.text.search"
  endterm="windows.text.search.title"/> window since OmegaT does color the matching results.</para>

  <para>The Java technical reference is useful as a canonical reference.

  <variablelist>
	<varlistentry id="appendix.regex.java">
	  <term id="appendix.regex.java.title"><ulink url="&javaregex;">Java Regex
	  documentation</ulink></term>
	  <listitem><para>The official reference for regular expressions used in
	  Java.</para></listitem>
	</varlistentry>
  </variablelist>
  
  If you want to know more about regular expressions, the two following resources have also proved very useful:

  <variablelist>
	<varlistentry id="appendix.regex.tools.regex101">
	  <term id="appendix.regex.tools.regex101.title"><ulink url="https://regex101.com">https://regex101.com</ulink></term>
	  <listitem><para>An online regular expression matcher where you enter the text you want to practice on and the regular expressions that you want to try.</para></listitem>
	</varlistentry>
	<varlistentry id="appendix.regex.tools.regular.expression.info">
	  <term id="appendix.regex.tools.regular.expression.info.title"><ulink url="https://www.regular-expressions.info">https://www.regular-expressions.info</ulink></term>
	  <listitem><para>One of the most thorough regular expression references on the web.</para></listitem>
	</varlistentry>
  </variablelist>

  OmegaT does not support either site in any way and if you find interesting references in your language, we would love to hear about them.
  </para>
</section>
</appendix>
