<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../../docbook-xml-4.5/docbookx.dtd"
[<!ENTITY % manualvariables SYSTEM "manualvariables.mod"> %manualvariables;]>

<appendix id="appendix.regexp">
  <title id="appendix.regexp.title">Regular expressions</title>

  <para>This appendix is intended for users who want to learn a powerful way to increase their productivity. Regular expressions are complex objects but even in their most basic form are extremely helpful and are offered in most of the applications that you use on a daily basis.</para>

  <para>Regular expressions are usually abbreviated <emphasis>regex</emphasis>
  or <emphasis>regexp</emphasis>. When needed, we will use the former in this
  annex, along with its plural <emphasis>regexes</emphasis>.</para>

  <section id="appendix.regexp.introduction">
	<title id="appendix.regexp.introduction.title">What are regular expressions</title>
  <para>Regular expressions are symbols or groups of symbols (expressions) that allow you to describe textual concepts.</para>
  <para>For example:
<variablelist>
  <varlistentry>
	<term>[0-9]</term>
	  <listitem><para>represents any one number from 0 to 9</para>
	  </listitem>
  </varlistentry>
  <varlistentry>
	<term>\w+</term>
	  <listitem><para>represents one or more characters that one can find in a "word"</para>
	  </listitem>
  </varlistentry>
  <varlistentry>
	<term>\h?</term>
	  <listitem><para>represents 0 or 1 horizontal white space character (which includes spaces, tabulations, etc. but not line-breaks that belong to the "vertical white space" category: \v)</para>
	  </listitem>
  </varlistentry>
</variablelist>
  </para>
  
  <para>Regular expressions are used in many places in OmegaT:

  <variablelist>
	<varlistentry>
	  <term>Searches</term>
	  <listitem><para>OmegaT searches include a <link
	  linkend="windows.text.search.methods.regex"
	  endterm="windows.text.search.methods.regex.title"/> option that allows you
	  to make extremely powerful searches across your files.</para> <para>An
	  option with the same label in the <link linkend="windows.text.replace"
	  endterm="windows.text.replace.title"/> dialog allows you to replace text
	  with regular expression search matches.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term>Custom tags</term>
	  <listitem><para>Custom tags are tags that you define using regular
	  expressions. The tags are handled exactly like OmegaT's native tags. See
	  <link
		  linkend="dialogs.preferences.tag.processing.regular.expressions.for.custom.tags"
		  endterm="dialogs.preferences.tag.processing.regular.expressions.for.custom.tags.title"/>
	  for details.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term>Flagged fragments</term>
	  <listitem><para><link
	  linkend="dialogs.preferences.tag.processing.regular.expressions.for.fragments.that.should.be.removed.from.translation"
	  endterm="dialogs.preferences.tag.processing.regular.expressions.for.fragments.that.should.be.removed.from.translation.title"/>
	  allow you to define strings that OmegaT will mark in red by default, and
	  consider as an extraneous tag for validation purposes.</para></listitem>
	</varlistentry>

	<varlistentry>
	  <term>Segmentation</term>
	  <listitem><para>Segmentation rules and language patterns are regular
	  expressions. You can modify them at will to better segment a document or
	  add general rule sets. See <link
	  linkend="dialogs.preferences.segmentation.setup"
	  endterm="dialogs.preferences.segmentation.setup.title"/> for
	  details.</para></listitem>
	</varlistentry>
  </variablelist>
  </para>
  </section>

  <section id="appendix.regexp.concepts">
	<title id="appendix.regexp.concepts.title">Concepts and practice</title>
	<para>Regular expressions are used to find text. A given expression will
	<emphasis>match</emphasis> a piece of text, or not.</para>
	<para>Each character used in an expression has an effect on the match. Some
	characters even have special effects.</para>
	<para>There are 4 rules to remember.</para>

	<variablelist>
	  <varlistentry>
		<term>Most characters match
		themselves</term>
		<listitem>
		  <para>Their only effect is to <emphasis>look for
		  themselves</emphasis> in the string.</para>
		  <para>For example, the 7 letters that compose the word
		  <emphasis>example</emphasis> only have the effect of looking for
		  themselves in the text, in that same order, i.e., the string
		  <emphasis>example</emphasis>.</para>
		</listitem>
	  </varlistentry>
	  <varlistentry>
		<term>Most alphabetical characters have a hidden special effect</term>
		<listitem>
		  <para>That special effect must be triggered by a special effect
		  character, otherwise, the character matches itself.</para>
		  <para>For example, <emphasis>r</emphasis> is a normal character but
		  also has a hidden special effect, triggered by preceeding it with
		  <emphasis>\</emphasis>, in which case it becomes
		  <emphasis>\r</emphasis> and has the special effect of matching a
		  <emphasis>carriage return character</emphasis> (by the way,
		  <emphasis>\R</emphasis> has the effect of matching <emphasis>any line
		  break character</emphasis>).</para>
		  <note><para>As of the versions of Java on which OmegaT is built, only
		  <emphasis>i j l m o y</emphasis> both in lower and upper case have no
		  hidden special effect.</para></note>
		</listitem>
	  </varlistentry>
	  <varlistentry>
		<term>12 characters have a special effect by default</term>
		<listitem>
		  <para>To match themselves, the special effect must be
		  disabled, by a special effect character.</para>
		  <para>For example, <emphasis>.</emphasis> has the default special effect of matching <emphasis>any one character</emphasis>.</para>
		  <para>To find a normal period, it is necessary to disable the special
		  effect with <emphasis>\</emphasis>, in which case it becomes
		  <emphasis>\.</emphasis> and matches only a period.</para>
		  
		  <para>As of the versions of Java on which OmegaT is build, the 12 characters are
		  <emphasis>the backslash \, the caret ^, the dollar sign $, the period or dot ., the vertical bar or pipe symbol |, the question mark ?, the asterisk or star *, the plus sign +, the opening parenthesis (, the closing parenthesis ), the opening square bracket [, and the opening curly brace {.</emphasis>
		  <variablelist>
			<varlistentry>
			  <term>\</term>
			  <listitem><para>The BACKSLASH either triggers or disables a special effect.
			  <example><emphasis role="bold">\.</emphasis> = a period</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>^</term>
			  <listitem><para>As the first character of an expression, the CARET matches the beginning of a line.
			  <example><emphasis role="bold">^A</emphasis> = an upper case A at the beginning of a line.</example></para>
			  <para>As the first character of a class, the CARET negates the contents of the class.
			  <example><emphasis role="bold">[^abc]</emphasis> = NEITHER a, nor b, nor c.</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>$</term>
			  <listitem><para>As the last character of an expression, the DOLLAR sign matches the end of a line.
			  <example><emphasis role="bold">^$</emphasis> = an empty line (there is nothing between the beginning and the end of the line).</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>.</term>
			  <listitem><para>The PERIOD matches any one character.
			  <example><emphasis role="bold">^...$</emphasis> = A three character "string" between the begining and the end of a line.</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>|</term>
			  <listitem><para>The VERTICAL BAR allows an alternative between two possibilities (OR).
			  <example><emphasis role="bold">^An |^The </emphasis> = the string "An " OR the string "The " at the beginning of a line.</example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>?</term>
			  <listitem><para><example></example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>*</term>
			  <listitem><para><example></example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>+</term>
			  <listitem><para><example></example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>(</term>
			  <listitem><para><example></example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>)</term>
			  <listitem><para><example></example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>[</term>
			  <listitem><para><example></example></para></listitem>
			</varlistentry>
			<varlistentry>
			  <term>{</term>
			  <listitem><para><example></example></para></listitem>
			</varlistentry>
		  </variablelist>
		  </para>
		  
		</listitem>
	  </varlistentry>
	  <varlistentry>
		<term>The character <emphasis>\</emphasis> is a very special character</term>
		<listitem><para>As you have seen above, the character <emphasis>\</emphasis> has a special effect by default and that special effect is to either trigger or disable special effects in other characters. When it preceeds a character that has no special effect (neither natural nor hidden), it has no effect.</para>
		<para><emphasis>\</emphasis> can be disabled by another <emphasis>\</emphasis>, in which case it becomes <emphasis>\\</emphasis> and matches what is called a <emphasis>backslash</emphasis>.</para></listitem>
	  </varlistentry>
	</variablelist>
	
	
  </section>
  
  <section id="appendix.regexp.reference">
	<title id="appendix.regexp.reference.title">Basic reference</title>
	
  <table id="appendix.regex.characters">
    <title id="appendix.regex.characters.title">Common expressions</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>x</entry>
          <entry>The character x itself
		  <para>Most characters match themselves.</para></entry>
        </row>


        <row>
          <entry>\t</entry>
          <entry>The tab character ('\u0009')
		  <para>The <emphasis>\</emphasis> triggers the special effect "this is a tab, not a t"</para></entry>
        </row>

        <row>
          <entry>\n</entry>
          <entry>The newline (line feed) character ('\u000A')
		  <para>The <emphasis>\</emphasis> triggers the special effect "this is a newline, not a n"</para></entry>
        </row>

        <row>
          <entry>\r</entry>
          <entry>The carriage-return character ('\u000D')
		  <para>The <emphasis>\</emphasis> triggers the special effect "this is a carriage-return, not a r"</para></entry>
        </row>

		        <row>
          <entry>[abc]</entry>
          <entry>a, b, or c
		  <para>A simple class is described by any number characters between [ and ]</para></entry>
        </row>

        <row>
          <entry>[C-X]</entry>
          <entry>A character among the "C through X" letters set
		  <para>a range is described by a character that starts a series, followed by a hyphen, followed by a character that ends the series. Any number of ranges can be defined this way: [a-zA-Z0-9].</para></entry>
        </row>

        <row>
          <entry>[^\n\r\t]</entry>
          <entry>Any character <emphasis>except</emphasis> a newline, a carriage-return, or a tabulation
		  <para>An exclusion class is described by a class that starts with the caret character</para></entry>
        </row>

      </tbody>
    </tgroup>
  </table>
  </section>

    <section id="appendix.regexp.examples">
	<title id="appendix.regexp.examples.title">Examples for use in OmegaT</title>
	
    <table id="regex.examples">
      <title id="regex.examples.title">Examples of regular expressions
that use the expressions above</title>

      <tgroup align="left" cols="2" rowsep="1">
        <colspec align="left" colnum="1"/>

        <thead>
          <row>
            <entry>Regular expression</entry>
            <entry>Finds the following:</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>(\b\w+\b)\s\1\b</entry>
            <entry>double words</entry>
          </row>

          <row>
            <entry>[\.,]\s*[\.,]+</entry>
            <entry>comma or a period, followed by spaces and yet another comma
            or period</entry>
          </row>

          <row>
            <entry>\. \s+$</entry>
            <entry>extra spaces after the period at the end of the line</entry>
          </row>

          <row>
            <entry>\s+a\s+[aeiou]</entry>
            <entry>English: words, beginning with vowels, should generally be
            preceded by &quot;an&quot;, not &quot;a&quot;</entry>
          </row>

          <row>
            <entry>\s+an\s+[^aeiou]</entry>
            <entry>English: the same check as above, but concerning consonants
            (&quot;a&quot;, not &quot;an&quot;)</entry>
          </row>

          <row>
            <entry>\s{2,}</entry>
            <entry>more than one space</entry>
          </row>

          <row>
            <entry>\.[A-Z]</entry>
            <entry>Period, followed by an upper-case letter - possibly a space
            is missing between the period and the start of a new
            sentence?</entry>
          </row>

          <row>
            <entry>\bis\b</entry>
            <entry>search for “is”, not “this” or “isn't” etc.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  

  <section>
	

  <table id="regex.flags">
    <title id="regex.flags.title">Regex - Flags</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>(?i)</entry>
          <entry>Enables case-insensitive matching (by default, the pattern is
          case-sensitive).</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
  
  <table id="appendix.regex.quotation">
    <title id="appendix.regex.quotation.title">Regex - Quotation</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>\</entry> <entry>Nothing, but quotes the following
          character. This is required if you would like to enter any of the meta
          characters !$()*+.&lt;&gt;?[\]^{|} to match as themselves.</entry>
        </row>

        <row>
          <entry>\\</entry>
          <entry>For example, this is the backslash character</entry>
        </row>

        <row>
          <entry>\Q</entry>
          <entry>Nothing, but quotes all characters until \E</entry>
        </row>

        <row>
          <entry>\E</entry>
          <entry>Nothing, but ends quoting started by \Q</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <table id="appendix.regex.unicode.blocs">
    <title id="appendix.regex.unicode.blocs.title">Regex - Classes for Unicode blocks and
    categories</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>\p{InGreek}</entry>
          <entry>A character in the Greek block (simple <ulink
          url="&javaregex;#ubc">
          block</ulink>)</entry>
        </row>

        <row>
          <entry>\p{Lu}</entry>
          <entry>An uppercase letter (simple <ulink
          url="&javaregex;#ubc">
          category</ulink>)</entry>
        </row>

        <row>
          <entry>\p{Sc}</entry>
          <entry>A currency symbol</entry>
        </row>

        <row>
          <entry>\P{InGreek}</entry>
          <entry>Any character except one in the Greek block
          (negation)</entry>
        </row>

        <row>
          <entry>[\p{L}&amp;&amp;[^\p{Lu}]]</entry>
          <entry>Any letter except an uppercase letter (subtraction)</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <table id="appendix.regex.classes">
    <title id="appendix.regex.classes.title">Regex - Character classes</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
      </tbody>
    </tgroup>
  </table>

  <table id="appendix.regex.predefines.classes">
    <title id="appendix.regex.predefines.classes.title">Regex - Predefined character classes</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>.</entry>
          <entry>Any character (except for line terminators)</entry>
        </row>

        <row>
          <entry>\d</entry>
          <entry>A digit: [0-9]</entry>
        </row>

        <row>
          <entry>\D</entry>
          <entry>A non-digit: [^0-9]</entry>
        </row>

        <row>
          <entry>\s</entry>
          <entry>A whitespace character: [ \t\n\x0B\f\r]</entry>
        </row>

        <row>
          <entry>\S</entry>
          <entry>A non-whitespace character: [^\s]</entry>
        </row>

        <row>
          <entry>\w</entry>
          <entry>A word character: [a-zA-Z_0-9]</entry>
        </row>

        <row>
          <entry>\W</entry>
          <entry>A non-word character: [^\w]</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <table id="appendix.regex.boundary.matchers">
    <title id="appendix.regex.boundary.matchers.title">Regex - Boundary matchers</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>^</entry>
          <entry>The beginning of a line</entry>
        </row>

        <row>
          <entry>$</entry>
          <entry>The end of a line</entry>
        </row>

        <row>
          <entry>\b</entry>
          <entry>A word boundary</entry>
        </row>

        <row>
          <entry>\B</entry>
          <entry>A non-word boundary</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <table id="appendix.regex.greedy.quantifiers">
    <title id="appendix.regex.greedy.quantifiers.title">Regex - Greedy quantifiers</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>X<emphasis>?</emphasis></entry>
          <entry>X, once or not at all</entry>
        </row>

        <row>
          <entry>X<emphasis>*</emphasis></entry>
          <entry>X, zero or more times</entry>
        </row>

        <row>
          <entry>X<emphasis>+</emphasis></entry>
          <entry>X, one or more times</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <note>
    <para>greedy quantifiers will match as much as they can. For example,
    <emphasis>a+</emphasis> will match the aaa in
    <emphasis>aaabbb</emphasis></para>
  </note>

  <table id="appendix.regex.non.greedy.quantifiers">
    <title id="appendix.regex.non.greedy.quantifiers.title">Regex - Reluctant
    (non-greedy) quantifiers</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>X??</entry>
          <entry>X, once or not at all</entry>
        </row>

        <row>
          <entry>X*?</entry>
          <entry>X, zero or more times</entry>
        </row>

        <row>
          <entry>X+?</entry>
          <entry>X, one or more times</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <note>
    <para>non-greedy quantifiers will match as little as they can. For
    example, <emphasis>a+?</emphasis> will match the first
    <emphasis>a</emphasis> in <emphasis>aaabbb</emphasis></para>
  </note>

  <table id="appendix.regex.logical.operators">
    <title id="appendix.regex.logical.operators.title">Regex - Logical operators</title>

    <tgroup align="left" cols="2" rowsep="1">
      <colspec align="left" colnum="1"/>

      <thead>
        <row>
          <entry align="left">Expression</entry>
          <entry align="left">Match</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>XY</entry>
          <entry>X followed by Y</entry>
        </row>

        <row>
          <entry>X|Y</entry>
          <entry>Either X or Y</entry>
        </row>

        <row>
          <entry>(XY)</entry>
          <entry>XY as a single group</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
</section>

  <section id="appendix.regex.tools">
    <title id="appendix.regex.tools.title">Tools and references</title>

    <para>Although OmegaT does not offer fancy coloring for your regular
    expressions, you can get a lot of practice by using the <link linkend="windows.text.search"
    endterm="windows.text.search.title"/> window since OmegaT does color the matching results.</para>

	<para>The Java technical reference that you can find above is only useful as a canonical reference. If you want to know more about regular expressions, the two following ressources have proved very useful:

	<variablelist>
	<varlistentry id="appendix.regex.tools.regex101">
	  <term id="appendix.regex.tools.regex101.title"><ulink url="https://regex101.com">https://regex101.com</ulink></term>
	  <listitem><para>An online regular expression matcher where you enter the text you want to practice on and the regular expressions that you want to try.</para></listitem>
	</varlistentry>
	<varlistentry id="appendix.regex.tools.regular.expression.info">
	  <term id="appendix.regex.tools.regular.expression.info.title"><ulink url="https://www.regular-expressions.info">https://www.regular-expressions.info</ulink></term>
	  <listitem><para>One of the most thorough regular expression reference on the web.</para></listitem>
	</varlistentry>
	<varlistentry id="appendix.regex.java">
	  <term id="appendix.regex.java.title"><ulink url="&javaregex;">Java Regex
	  documentation</ulink></term>
	  <listitem><para>The official reference for regular expressions used in
	  Java.</para></listitem>
	</varlistentry>

	</variablelist>

	OmegaT does not support either site in any way and if you find interesting references in your language, we would love to hear about them.
	</para>


  </section>
</appendix>
